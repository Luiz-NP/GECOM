import React from 'react';
import { TextInputProps } from 'react-native';
export interface InputStandardMethods {
    /**
     * Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.
     */
    focus: () => void;
    /**
     * Removes focus from an input or view. This is the opposite of focus()
     */
    blur: () => void;
    /**
     * Returns current focus of input.
     */
    isFocused: Boolean;
    /**
     * Removes all text from the TextInput.
     */
    clear: () => void;
}
export interface InputStandardProps extends TextInputProps {
    /**
     * Placeholder for the textinput.
     * @default Placeholder
     * @type string
     */
    placeholder?: string;
    /**
     * Font size for TextInput.
     * @default 14
     * @type number
     */
    fontSize?: number;
    /**
     * Color of TextInput font.
     * @default 'black'
     * @type string
     */
    fontColor?: string;
    /**
     * Font family for all fonts.
     * @default undefined
     * @type string
     */
    fontFamily?: string;
    /**
     * Vertical padding for TextInput Container. Used to calculate animations.
     * @default 12
     * @type number
     */
    paddingVertical?: number;
    /**
     * Vertical padding for TextInput Container.
     * @default 16
     * @type number
     */
    paddingHorizontal?: number;
    /**
     * Color when focused.
     * @default 'blue'
     * @type string
     */
    activeColor?: string;
    /**
     * Color when blurred (not focused).
     * @default 'grey'
     * @type string
     */
    inactiveColor?: string;
    /**
     * Background color of the InputStandard.
     * @default 'white'
     * @type string
     */
    backgroundColor?: string;
    /**
     * Error message is displayed. If anything is provided to error besides null or undefined, then the component is
     * within an error state, thus displaying the error message provided here and errorColor.
     * @default undefined
     * @type string
     */
    error?: string;
    /**
     * Color that is displayed when in error state.
     * @default 'red'
     * @type string
     */
    errorColor?: string;
    /**
     * Trailing Icon for the TextInput.
     * @default undefined
     * @type React.FC
     */
    trailingIcon?: React.FC;
    /**
     * Border radius applied to container.
     * @default 5
     * @type number
     */
    roundness?: number;
    /**
     * Will show a character count helper text and limit the characters being entered.
     * @default undefined
     * @type number
     */
    characterCount?: number;
    characterCountFontSize?: number;
    characterCountFontFamily?: string;
    characterCountColor?: string;
    /**
     * Helper text that can be displayed to assist users with Inputs. `error` prop will override this.
     * @default undefined
     * @type string
     */
    assistiveText?: string;
    /**
     * Font size of assistive text.
     * @default 10
     * @type number
     */
    assistiveTextFontSize?: number;
    /**
     * Color of assistive text.
     * @default inactiveColor
     * @type string
     */
    assistiveTextColor?: string;
    /**
     * Font family of assistive text.
     * @default undefined
     * @type string
     */
    assistiveFontFamily?: string;
    /**
     * Font size of error text.
     * @default 10
     * @type number
     */
    errorFontSize?: number;
    /**
     * Font family of error text.
     * @default undefined
     * @type string
     */
    errorFontFamily?: string;
}
declare type InputStandard = InputStandardMethods;
declare const InputStandard: React.ForwardRefExoticComponent<InputStandardProps & React.RefAttributes<InputStandardMethods>>;
export { InputStandard };
