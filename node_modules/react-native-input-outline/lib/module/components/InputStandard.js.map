{"version":3,"sources":["InputStandard.tsx"],"names":["React","useRef","forwardRef","useImperativeHandle","useEffect","useState","useCallback","useMemo","StyleSheet","TextInput","TouchableWithoutFeedback","View","Text","LogBox","Animated","useSharedValue","withTiming","useAnimatedStyle","interpolate","Extrapolate","interpolateColor","InputStandardComponent","props","ref","inactiveColor","activeColor","errorColor","backgroundColor","fontSize","fontColor","fontFamily","error","errorFontSize","errorFontFamily","assistiveText","assistiveTextFontSize","assistiveTextColor","assistiveFontFamily","characterCount","characterCountFontFamily","characterCountColor","characterCountFontSize","paddingHorizontal","paddingVertical","style","placeholder","trailingIcon","value","_providedValue","onChangeText","inputProps","setValue","inputRef","placeholderMap","placeholderSize","colorMap","focus","current","blur","isFocused","Boolean","clear","errorState","undefined","handleFocus","handleBlur","handleChangeText","text","handlePlaceholderLayout","nativeEvent","width","layout","renderTrailingIcon","length","animatedPlaceholderStyles","transform","translateY","scale","translateX","animatedPlaceholderTextStyles","color","animatedPlaceholderSpacerStyles","CLAMP","animatedContainerStyle","borderColor","styles","create","container","borderBottomWidth","alignSelf","flexDirection","inputContainer","paddingRight","flex","justifyContent","alignItems","input","position","top","placeholderText","placeholderSpacer","left","height","errorText","bottom","right","counterText","placeholderStyle","InputStandard","ignoreLogs"],"mappings":"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","sourcesContent":["import React, {\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n  useEffect,\n  useState,\n  useCallback,\n  useMemo,\n} from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  TextInputProps,\n  TouchableWithoutFeedback,\n  View,\n  Text,\n  // @ts-ignore\n  LogBox,\n} from 'react-native';\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  interpolate,\n  Extrapolate,\n  interpolateColor,\n} from 'react-native-reanimated';\n\nexport interface InputStandardMethods {\n  /**\n   * Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.\n   */\n  focus: () => void;\n  /**\n   * Removes focus from an input or view. This is the opposite of focus()\n   */\n  blur: () => void;\n  /**\n   * Returns current focus of input.\n   */\n  isFocused: Boolean;\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear: () => void;\n}\n\nexport interface InputStandardProps extends TextInputProps {\n  /**\n   * Placeholder for the textinput.\n   * @default Placeholder\n   * @type string\n   */\n  placeholder?: string;\n  /**\n   * Font size for TextInput.\n   * @default 14\n   * @type number\n   */\n  fontSize?: number;\n  /**\n   * Color of TextInput font.\n   * @default 'black'\n   * @type string\n   */\n  fontColor?: string;\n  /**\n   * Font family for all fonts.\n   * @default undefined\n   * @type string\n   */\n  fontFamily?: string;\n  /**\n   * Vertical padding for TextInput Container. Used to calculate animations.\n   * @default 12\n   * @type number\n   */\n  paddingVertical?: number;\n  /**\n   * Vertical padding for TextInput Container.\n   * @default 16\n   * @type number\n   */\n  paddingHorizontal?: number;\n  /**\n   * Color when focused.\n   * @default 'blue'\n   * @type string\n   */\n  activeColor?: string;\n  /**\n   * Color when blurred (not focused).\n   * @default 'grey'\n   * @type string\n   */\n  inactiveColor?: string;\n  /**\n   * Background color of the InputStandard.\n   * @default 'white'\n   * @type string\n   */\n  backgroundColor?: string;\n  /**\n   * Error message is displayed. If anything is provided to error besides null or undefined, then the component is\n   * within an error state, thus displaying the error message provided here and errorColor.\n   * @default undefined\n   * @type string\n   */\n  error?: string;\n  /**\n   * Color that is displayed when in error state.\n   * @default 'red'\n   * @type string\n   */\n  errorColor?: string;\n  /**\n   * Trailing Icon for the TextInput.\n   * @default undefined\n   * @type React.FC\n   */\n  trailingIcon?: React.FC;\n  /**\n   * Border radius applied to container.\n   * @default 5\n   * @type number\n   */\n  roundness?: number;\n  /**\n   * Will show a character count helper text and limit the characters being entered.\n   * @default undefined\n   * @type number\n   */\n  characterCount?: number;\n  characterCountFontSize?: number;\n  characterCountFontFamily?: string;\n  characterCountColor?: string;\n  /**\n   * Helper text that can be displayed to assist users with Inputs. `error` prop will override this.\n   * @default undefined\n   * @type string\n   */\n  assistiveText?: string;\n  /**\n   * Font size of assistive text.\n   * @default 10\n   * @type number\n   */\n  assistiveTextFontSize?: number;\n  /**\n   * Color of assistive text.\n   * @default inactiveColor\n   * @type string\n   */\n  assistiveTextColor?: string;\n  /**\n   * Font family of assistive text.\n   * @default undefined\n   * @type string\n   */\n  assistiveFontFamily?: string;\n  /**\n   * Font size of error text.\n   * @default 10\n   * @type number\n   */\n  errorFontSize?: number;\n  /**\n   * Font family of error text.\n   * @default undefined\n   * @type string\n   */\n  errorFontFamily?: string;\n}\n\ntype InputStandard = InputStandardMethods;\n\nconst InputStandardComponent = forwardRef<InputStandard, InputStandardProps>(\n  (props, ref) => {\n    // establish provided props\n    const {\n      // theme colors\n      inactiveColor = 'grey',\n      activeColor = 'blue',\n      errorColor = 'red',\n      backgroundColor = 'white',\n\n      // fonts\n      fontSize = 14,\n      fontColor = 'black',\n      fontFamily,\n\n      error,\n      errorFontSize = 10,\n      errorFontFamily,\n\n      assistiveText,\n      assistiveTextFontSize = 10,\n      assistiveTextColor = inactiveColor,\n      assistiveFontFamily,\n\n      characterCount,\n      characterCountFontFamily,\n      characterCountColor = inactiveColor,\n      characterCountFontSize = 10,\n\n      // styling\n      paddingHorizontal = 16,\n      paddingVertical = 12,\n      style,\n\n      // features\n      placeholder = 'Placeholder',\n      trailingIcon,\n\n      // others\n      value: _providedValue = '',\n      onChangeText,\n      ...inputProps\n    } = props;\n    // value of input\n    const [value, setValue] = useState(_providedValue);\n\n    // animation vars\n    const inputRef = useRef<TextInput>(null);\n    const placeholderMap = useSharedValue(_providedValue ? 1 : 0);\n    const placeholderSize = useSharedValue(0);\n    const colorMap = useSharedValue(0);\n\n    // helper functinos\n    const focus = () => inputRef.current?.focus();\n    const blur = () => inputRef.current?.blur();\n    const isFocused = () => Boolean(inputRef.current?.isFocused());\n    const clear = () => {\n      Boolean(inputRef.current?.clear());\n      setValue('');\n    };\n\n    const errorState = useCallback(\n      () => error !== null && error !== undefined,\n      [error]\n    );\n\n    const handleFocus = () => {\n      placeholderMap.value = withTiming(1); // focused\n      if (!errorState()) colorMap.value = withTiming(1); // active\n      focus();\n    };\n\n    const handleBlur = () => {\n      if (!value) placeholderMap.value = withTiming(0); // blur\n      if (!errorState()) colorMap.value = withTiming(0); // inactive\n      blur();\n    };\n\n    const handleChangeText = (text: string) => {\n      onChangeText && onChangeText(text);\n      setValue(text);\n    };\n\n    const handlePlaceholderLayout = useCallback(\n      ({ nativeEvent }) => {\n        const { width } = nativeEvent.layout;\n        placeholderSize.value = width;\n      },\n      [placeholderSize]\n    );\n\n    const renderTrailingIcon = useCallback(() => {\n      if (trailingIcon) return trailingIcon({});\n      return null;\n    }, [trailingIcon]);\n\n    // handle value update\n    useEffect(() => {\n      if (_providedValue.length) placeholderMap.value = withTiming(1); // focused;\n      setValue(_providedValue);\n    }, [_providedValue, placeholderMap]);\n    // error handling\n    useEffect(() => {\n      if (errorState()) {\n        colorMap.value = 2; // error -- no animation here, snap to color immediately\n      } else {\n        colorMap.value = isFocused() ? 1 : 0; // to active or inactive color if focused\n      }\n    }, [error, colorMap, errorState]);\n\n    const animatedPlaceholderStyles = useAnimatedStyle(() => ({\n      transform: [\n        {\n          translateY: interpolate(\n            placeholderMap.value,\n            [0, 1],\n            [0, -(paddingVertical + fontSize * 0.7)]\n          ),\n        },\n        {\n          scale: interpolate(placeholderMap.value, [0, 1], [1, 0.7]),\n        },\n        {\n          translateX: interpolate(\n            placeholderMap.value,\n            [0, 1],\n            [0, -placeholderSize.value * 0.2]\n          ),\n        },\n      ],\n    }));\n\n    const animatedPlaceholderTextStyles = useAnimatedStyle(() => ({\n      color: interpolateColor(\n        colorMap.value,\n        [0, 1, 2],\n        [inactiveColor, activeColor, errorColor]\n      ),\n    }));\n\n    const animatedPlaceholderSpacerStyles = useAnimatedStyle(() => ({\n      width: interpolate(\n        placeholderMap.value,\n        [0, 1],\n        [0, placeholderSize.value * 0.7 + 7],\n        Extrapolate.CLAMP\n      ),\n    }));\n\n    const animatedContainerStyle = useAnimatedStyle(() => ({\n      borderColor:\n        placeholderSize.value > 0\n          ? interpolateColor(\n              colorMap.value,\n              [0, 1, 2],\n              [inactiveColor, activeColor, errorColor]\n            )\n          : inactiveColor,\n    }));\n\n    useImperativeHandle(ref, () => ({\n      focus: handleFocus,\n      blur: handleBlur,\n      isFocused: isFocused(),\n      clear: clear,\n    }));\n\n    const styles = StyleSheet.create({\n      container: {\n        borderBottomWidth: 1,\n        alignSelf: 'stretch',\n        flexDirection: 'row',\n        backgroundColor,\n      },\n      inputContainer: {\n        paddingVertical,\n        paddingRight: paddingHorizontal,\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      },\n      input: {\n        flex: 1,\n        fontSize,\n        fontFamily,\n        color: fontColor,\n      },\n      placeholder: {\n        position: 'absolute',\n        top: paddingVertical,\n      },\n      placeholderText: {\n        fontSize,\n        fontFamily,\n      },\n      placeholderSpacer: {\n        position: 'absolute',\n        top: -1,\n        left: paddingHorizontal - 3,\n        backgroundColor: 'transparent',\n        height: 1,\n      },\n      errorText: {\n        position: 'absolute',\n        color: errorColor,\n        fontSize: errorFontSize,\n        fontFamily: errorFontFamily,\n        bottom: -errorFontSize - 7,\n        left: paddingHorizontal,\n      },\n      trailingIcon: {\n        position: 'absolute',\n        right: paddingHorizontal,\n        alignSelf: 'center',\n      },\n      counterText: {\n        position: 'absolute',\n        color: errorState() ? errorColor : characterCountColor,\n        fontSize: characterCountFontSize,\n        bottom: -characterCountFontSize - 7,\n        right: paddingHorizontal,\n        fontFamily: characterCountFontFamily,\n      },\n      assistiveText: {\n        position: 'absolute',\n        color: assistiveTextColor,\n        fontSize: assistiveTextFontSize,\n        bottom: -assistiveTextFontSize - 7,\n        left: paddingHorizontal,\n        fontFamily: assistiveFontFamily,\n      },\n    });\n\n    const placeholderStyle = useMemo(() => {\n      return [styles.placeholder, animatedPlaceholderStyles];\n    }, [styles.placeholder, animatedPlaceholderStyles]);\n\n    return (\n      <Animated.View style={[styles.container, animatedContainerStyle, style]}>\n        <TouchableWithoutFeedback onPress={handleFocus}>\n          <View style={styles.inputContainer}>\n            <TextInput\n              {...inputProps}\n              ref={inputRef}\n              style={styles.input}\n              pointerEvents={isFocused() ? 'auto' : 'none'}\n              onFocus={handleFocus}\n              onBlur={handleBlur}\n              onChangeText={handleChangeText}\n              maxLength={characterCount ? characterCount : undefined}\n              selectionColor={errorState() ? errorColor : activeColor}\n              placeholder=\"\"\n              value={value}\n            />\n          </View>\n        </TouchableWithoutFeedback>\n        {trailingIcon && (\n          <View style={styles.trailingIcon}>{renderTrailingIcon()}</View>\n        )}\n        <Animated.View\n          style={[styles.placeholderSpacer, animatedPlaceholderSpacerStyles]}\n        />\n        <Animated.View\n          style={placeholderStyle}\n          onLayout={handlePlaceholderLayout}\n          pointerEvents=\"none\"\n        >\n          <Animated.Text\n            style={[styles.placeholderText, animatedPlaceholderTextStyles]}\n          >\n            {placeholder}\n          </Animated.Text>\n        </Animated.View>\n        {characterCount && (\n          <Text\n            style={styles.counterText}\n          >{`${value.length} / ${characterCount}`}</Text>\n        )}\n        {errorState() ? (\n          <Text style={[styles.errorText]}>{error}</Text>\n        ) : (\n          assistiveText && (\n            <Text style={[styles.assistiveText]}>{assistiveText}</Text>\n          )\n        )}\n      </Animated.View>\n    );\n  }\n);\n\nconst InputStandard = InputStandardComponent;\nexport { InputStandard };\n\n// color issue\nLogBox.ignoreLogs(['You are setting the style `{ color: ... }` as a prop.']);\n"]}